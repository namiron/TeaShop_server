
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email     String   @unique
  password  String?

  name      String   @default("No name")
  picture   String   @default("/uploads/userImage.png")

  stores     Store[] 

  favorites Product[]

  reviews   Review[]

  orders     Order[]

  @@map("user")
}

model Store {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  title       String
  description String?

  user        User?   @relation(fields: [userId], references: [id])
  userId      String? @db.ObjectId @map("user_id")
  
  colors      Color[]

  products    Product[]

  category    Category[]  

  reviews     Review[]

  orderItems  OrderItem[]

  @@map("store")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  title       String
  description String  

  price       Int
  images      String[]

  reviews     Review[]

  orderItems  OrderItem[]

  user        User? @relation(fields: [userId], references: [id])
  userId      String? @map("user_id") @db.ObjectId

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     String? @map("store_id") @db.ObjectId

  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String? @map("category_id") @db.ObjectId

  color       Color? @relation(fields: [colorId], references: [id])
  colorId     String? @map("color_id") @db.ObjectId

  @@map("product")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  title       String
  description String  

  products    Product[]

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     String? @map("store_id") @db.ObjectId

  @@map("category")
}

model Color {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  name       String
  value      String  

  products    Product[]

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     String? @map("store_id") @db.ObjectId

  @@map("color")
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  text        String
  rating      Int

  user        User? @relation(fields: [userId], references: [id])
  userId      String? @map("user_id") @db.ObjectId

  product     Product? @relation(fields: [productId], references: [id])
  productId   String? @map("product_id") @db.ObjectId

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     String? @map("store_id") @db.ObjectId

  @@map("review")
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  status      EnumOrderStatus @default(PENDING)

  items       OrderItem[]
  total       Int

  user        User? @relation(fields: [userId], references: [id])
  userId      String? @map("user_id") @db.ObjectId
  
  @@map("order")
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  quantity    Int
  price       Int

  order       Order? @relation(fields: [orderId], references: [id])
  orderId     String? @map("order_id") @db.ObjectId

  product     Product? @relation(fields: [productId], references: [id])
  productId   String? @map("product_id") @db.ObjectId

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     String? @map("store_id") @db.ObjectId

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
