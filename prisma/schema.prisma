generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  email     String      @unique
  password  String?

  name      String      @default("No name")
  picture   String      @default("/uploads/userImage.png")

  stores     Store[]
  favorites  Product[]
  reviews    Review[]
  orders     Order[]
}

model Store {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  title       String
  description String?

  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId

  colors      Color[]
  products    Product[]
  category    Category[]
  reviews     Review[]
  orderItems  OrderItem[]
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  title       String
  description String

  price       Int
  images      String[]

  reviews     Review[]
  orderItems  OrderItem[]

  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId

  store       Store?   @relation(fields: [storeId], references: [id])
  storeId     String?  @db.ObjectId

  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?  @db.ObjectId

  color       Color?   @relation(fields: [colorId], references: [id])
  colorId     String?  @db.ObjectId
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  title       String
  description String

  products    Product[]

  store       Store?   @relation(fields: [storeId], references: [id])
  storeId     String?  @db.ObjectId
}

model Color {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  value       String

  products    Product[]

  store       Store?   @relation(fields: [storeId], references: [id])
  storeId     String?  @db.ObjectId
}

model Review {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  text        String
  rating      Int

  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId

  product     Product? @relation(fields: [productId], references: [id])
  productId   String?  @db.ObjectId

  store       Store?   @relation(fields: [storeId], references: [id])
  storeId     String?  @db.ObjectId
}

model Order {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  status      EnumOrderStatus @default(PENDING)
  items       OrderItem[]
  total       Int

  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.ObjectId
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quantity    Int
  price       Int

  order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String?  @db.ObjectId

  product     Product? @relation(fields: [productId], references: [id])
  productId   String?  @db.ObjectId

  store       Store?   @relation(fields: [storeId], references: [id])
  storeId     String?  @db.ObjectId
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
