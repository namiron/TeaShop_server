generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")   
}

model User {
  id        Int      @id @default(autoincrement())   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String   @unique
  password  String?

  name      String   @default("No name")
  picture   String   @default("/uploads/userImage.png")

  stores     Store[] 
  favorites  Product[]
  reviews    Review[]
  orders     Order[]

  @@map("user")
}

model Store {
  id          Int      @id @default(autoincrement())  // Используем Int вместо ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  title       String
  description String?

  user        User?   @relation(fields: [userId], references: [id])
  userId      Int?    @map("user_id")
  
  colors      Color[]
  products    Product[]
  category    Category[]  
  reviews     Review[]
  orderItems  OrderItem[]

  @@map("store")
}

model Product {
  id          Int      @id @default(autoincrement())  // Используем Int вместо ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  title       String
  description String  

  price       Int
  images      String[]

  reviews     Review[]
  orderItems  OrderItem[]

  user        User? @relation(fields: [userId], references: [id])
  userId      Int?  @map("user_id")

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     Int?  @map("store_id")

  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?  @map("category_id")

  color       Color? @relation(fields: [colorId], references: [id])
  colorId     Int?  @map("color_id")

  @@map("product")
}

model Category {
  id          Int      @id @default(autoincrement())  // Используем Int вместо ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  title       String
  description String  

  products    Product[]

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     Int?   @map("store_id")

  @@map("category")
}

model Color {
  id          Int      @id @default(autoincrement())  // Используем Int вместо ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  name        String
  value       String  

  products    Product[]

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     Int?   @map("store_id")

  @@map("color")
}

model Review {
  id          Int      @id @default(autoincrement())  // Используем Int вместо ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  text        String
  rating      Int

  user        User? @relation(fields: [userId], references: [id])
  userId      Int?  @map("user_id")

  product     Product? @relation(fields: [productId], references: [id])
  productId   Int?  @map("product_id")

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     Int?  @map("store_id")

  @@map("review")
}

model Order {
  id          Int      @id @default(autoincrement())  // Используем Int вместо ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  status      EnumOrderStatus @default(PENDING)
  items       OrderItem[]
  total       Int

  user        User? @relation(fields: [userId], references: [id])
  userId      Int?  @map("user_id")

  @@map("order")
}

model OrderItem {
  id          Int      @id @default(autoincrement())  // Используем Int вместо ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  quantity    Int
  price       Int

  order       Order? @relation(fields: [orderId], references: [id])
  orderId     Int?   @map("order_id")

  product     Product? @relation(fields: [productId], references: [id])
  productId   Int?   @map("product_id")

  store       Store? @relation(fields: [storeId], references: [id])
  storeId     Int?   @map("store_id")

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
